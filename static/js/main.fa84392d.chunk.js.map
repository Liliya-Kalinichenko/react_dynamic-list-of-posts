{"version":3,"sources":["utils/fetchClient.ts","CommentsContext.tsx","api/Comments.tsx","PostContext.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/Users.tsx","api/Posts.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","CommentsContext","React","createContext","comments","setComments","isCommentLoading","setIsCommentLoading","isCommentLoadError","setIsCommentLoadError","isCommentDeleteError","setIsCommentDeleteError","isFormShown","setIsFormShown","hadnleCommentDelete","CommentsProvider","children","useState","id","commentId","currentComments","filter","comment","catch","value","useMemo","Provider","PostContext","posts","setPosts","selectedPost","setSelectedPost","isPostLoading","setIsPostLoading","isPostLoadError","setIsPostLoadError","PostProvider","PostsList","useContext","handleOpenPostClick","post","postId","finally","className","map","title","isPostSelected","type","cn","onClick","Loader","NewCommentForm","name","setName","isNameError","setIsNameError","email","setEmail","isEmailError","setIsEmailError","setBody","isBodyError","setIsBodyError","isSubmitting","setIsSubmitting","reset","onSubmit","event","preventDefault","trim","addComment","newComment","htmlFor","placeholder","onChange","target","PostDetails","length","href","UserSelector","selectedUser","setSelectedUser","users","setUsers","isSelectOpen","setIsSelectOpen","useEffect","handleUserSelect","user","userId","onBlur","role","onMouseDown","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa84392d.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useMemo, useState } from 'react';\nimport { Comment } from './types/Comment';\nimport { deleteComment } from './api/Comments';\n\ntype CommentsState = {\n  comments: Comment[],\n  setComments: (comments: Comment[]) => void,\n  isCommentLoading: boolean,\n  setIsCommentLoading: (value: boolean) => void,\n  isCommentLoadError: boolean,\n  setIsCommentLoadError: (value: boolean) => void,\n  isCommentDeleteError: boolean,\n  setIsCommentDeleteError: (value: boolean) => void,\n  isFormShown: boolean,\n  setIsFormShown: (value: boolean) => void,\n  hadnleCommentDelete: (id: number) => void;\n};\n\nexport const CommentsContext = React.createContext<CommentsState>({\n  comments: [],\n  setComments: () => {},\n  isCommentLoading: false,\n  setIsCommentLoading: () => {},\n  isCommentLoadError: false,\n  setIsCommentLoadError: () => {},\n  isCommentDeleteError: false,\n  setIsCommentDeleteError: () => {},\n  isFormShown: false,\n  setIsFormShown: () => {},\n  hadnleCommentDelete: () => {},\n});\n\ninterface Props {\n  children: React.ReactNode,\n}\n\nexport const CommentsProvider: React.FC<Props> = ({ children }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n  const [isCommentLoadError, setIsCommentLoadError] = useState(false);\n  const [isCommentDeleteError, setIsCommentDeleteError] = useState(false);\n  const [isFormShown, setIsFormShown] = useState(false);\n\n  const hadnleCommentDelete = (id: number) => {\n    setIsCommentDeleteError(false);\n    deleteComment(id)\n      .then(() => setComments(\n        currentComments => currentComments.filter(comment => comment.id !== id),\n      ))\n      .catch(() => {\n        setIsCommentDeleteError(true);\n      });\n  };\n\n  const value = useMemo(() => ({\n    comments,\n    setComments,\n    isCommentLoading,\n    setIsCommentLoading,\n    isCommentLoadError,\n    setIsCommentLoadError,\n    isCommentDeleteError,\n    setIsCommentDeleteError,\n    isFormShown,\n    setIsFormShown,\n    hadnleCommentDelete,\n  }), [\n    comments,\n    isCommentLoading,\n    isCommentLoadError,\n    isCommentDeleteError,\n    isFormShown,\n  ]);\n\n  return (\n    <CommentsContext.Provider value={value}>\n      {children}\n    </CommentsContext.Provider>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (\n  postId: number,\n  { name, email, body }: CommentData,\n) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useMemo, useState } from 'react';\nimport { Post } from './types/Post';\n\ntype PostState = {\n  posts: Post[],\n  setPosts: (comments: Post[]) => void,\n  selectedPost: Post | null,\n  setSelectedPost: (post: Post | null) => void,\n  isPostLoading: boolean,\n  setIsPostLoading: (value: boolean) => void,\n  isPostLoadError: boolean,\n  setIsPostLoadError: (value: boolean) => void,\n};\n\nexport const PostContext = React.createContext<PostState>({\n  posts: [],\n  setPosts: () => {},\n  selectedPost: null,\n  setSelectedPost: () => {},\n  isPostLoading: false,\n  setIsPostLoading: () => {},\n  isPostLoadError: false,\n  setIsPostLoadError: () => {},\n});\n\ninterface Props {\n  children: React.ReactNode,\n}\n\nexport const PostProvider: React.FC<Props> = ({ children }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isPostLoading, setIsPostLoading] = useState(false);\n  const [isPostLoadError, setIsPostLoadError] = useState(false);\n\n  const value = useMemo(() => ({\n    posts,\n    setPosts,\n    selectedPost,\n    setSelectedPost,\n    isPostLoading,\n    setIsPostLoading,\n    isPostLoadError,\n    setIsPostLoadError,\n  }), [posts, isPostLoading, isPostLoadError, selectedPost]);\n\n  return (\n    <PostContext.Provider value={value}>\n      {children}\n    </PostContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport cn from 'classnames';\n\nimport { Post } from '../types/Post';\nimport { getComments } from '../api/Comments';\nimport { CommentsContext } from '../CommentsContext';\nimport { PostContext } from '../PostContext';\n\nexport const PostsList: React.FC = () => {\n  const {\n    setComments,\n    setIsCommentLoading,\n    setIsCommentLoadError,\n    setIsCommentDeleteError,\n    setIsFormShown,\n  } = useContext(CommentsContext);\n\n  const {\n    posts,\n    selectedPost,\n    setSelectedPost,\n  } = useContext(PostContext);\n\n  const handleOpenPostClick = (post: Post) => {\n    setIsFormShown(false);\n    if (selectedPost && selectedPost.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n      setIsCommentLoading(true);\n      getComments(post.id)\n        .then(setComments)\n        .catch(() => {\n          setIsCommentLoading(false);\n          setIsCommentLoadError(true);\n        })\n        .finally(() => {\n          setIsCommentLoading(false);\n        });\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n            const isPostSelected = selectedPost && selectedPost.id === post.id;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={cn('button is-link', {\n                      'is-light': !isPostSelected,\n                    })}\n                    onClick={() => {\n                      handleOpenPostClick(post);\n                      setIsCommentLoadError(false);\n                      setIsCommentDeleteError(false);\n                    }}\n                  >\n                    {isPostSelected\n                      ? 'Close'\n                      : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport React, { useContext, useState } from 'react';\nimport { addComment } from '../api/Comments';\nimport { PostContext } from '../PostContext';\nimport { CommentsContext } from '../CommentsContext';\n\nexport const NewCommentForm: React.FC = () => {\n  const [name, setName] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [isEmailError, setIsEmailError] = useState(false);\n\n  const [body, setBody] = useState('');\n  const [isBodyError, setIsBodyError] = useState(false);\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const { selectedPost } = useContext(PostContext);\n  const {\n    comments,\n    setComments,\n    setIsCommentLoadError,\n  } = useContext(CommentsContext);\n\n  const reset = () => {\n    setName('');\n    setIsNameError(false);\n    setEmail('');\n    setIsEmailError(false);\n    setBody('');\n    setIsBodyError(false);\n  };\n\n  const handleCommentSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!name.trim()) {\n      setIsNameError(true);\n    }\n\n    if (!email.trim()) {\n      setIsEmailError(true);\n    }\n\n    if (!body.trim()) {\n      setIsBodyError(true);\n    }\n\n    if (!name.trim() || !email.trim() || !body.trim()) {\n      return;\n    }\n\n    setIsCommentLoadError(false);\n    setIsSubmitting(true);\n\n    if (selectedPost) {\n      addComment(selectedPost.id, {\n        name,\n        email,\n        body,\n      })\n        .then(newComment => {\n          setComments([...comments, newComment]);\n        })\n        .catch(() => {\n          setIsCommentLoadError(true);\n        })\n        .finally(() => {\n          setIsSubmitting(false);\n          reset();\n        });\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleCommentSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': isNameError,\n            })}\n            value={name}\n            onChange={event => {\n              setName(event.target.value);\n              setIsNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': isEmailError,\n            })}\n            value={email}\n            onChange={event => {\n              setEmail(event.target.value);\n              setIsEmailError(false);\n            }}\n\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('input', {\n              'is-danger': isBodyError,\n            })}\n            value={body}\n            onChange={event => {\n              setBody(event.target.value);\n              setIsBodyError(false);\n            }}\n\n          />\n        </div>\n\n        {isBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isSubmitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentsContext } from '../CommentsContext';\nimport { PostContext } from '../PostContext';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    comments,\n    isCommentLoading,\n    isCommentLoadError,\n    isCommentDeleteError,\n    isFormShown,\n    setIsFormShown,\n    hadnleCommentDelete,\n  } = useContext(CommentsContext);\n\n  const { selectedPost } = useContext(PostContext);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {selectedPost && `#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost && selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentLoading ? (\n            <Loader />\n          ) : (\n            <>\n              {(isCommentLoadError || isCommentDeleteError) && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {!comments.length && !isCommentLoadError && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n\n              {!!comments.length && !isCommentLoadError && (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n\n                  {comments.map(comment => {\n                    const { id, name, body } = comment;\n\n                    return (\n                      <>\n                        <article\n                          className=\"message is-small\"\n                          data-cy=\"Comment\"\n                          key={id}\n                        >\n                          <div className=\"message-header\">\n                            <a\n                              href=\"mailto:misha@mate.academy\"\n                              data-cy=\"CommentAuthor\"\n                            >\n                              {name}\n                            </a>\n                            <button\n                              data-cy=\"CommentDelete\"\n                              type=\"button\"\n                              className=\"delete is-small\"\n                              aria-label=\"delete\"\n                              onClick={() => hadnleCommentDelete(id)}\n                            >\n                              delete button\n                            </button>\n                          </div>\n\n                          <div className=\"message-body\" data-cy=\"CommentBody\">\n                            {body}\n                          </div>\n                        </article>\n\n                      </>\n                    );\n                  })}\n                </>\n              )}\n\n              {!isCommentLoadError && !isFormShown && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setIsFormShown(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n\n        {isFormShown && !isCommentLoadError && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState, useContext } from 'react';\nimport { User } from '../types/User';\nimport { getUsers } from '../api/Users';\nimport { getPosts } from '../api/Posts';\nimport { PostContext } from '../PostContext';\n\ntype Props = {\n  selectedUser: User | null,\n  setSelectedUser: (user: User | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isSelectOpen, setIsSelectOpen] = useState(false);\n\n  const {\n    setPosts,\n    setIsPostLoading,\n    setIsPostLoadError,\n  } = useContext(PostContext);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n    setIsSelectOpen(false);\n    setIsPostLoading(true);\n    setIsPostLoadError(false);\n    getPosts(user.id)\n      .then(setPosts)\n      .catch(() => {\n        setIsPostLoading(false);\n        setIsPostLoadError(true);\n        setPosts([]);\n      })\n      .finally(() => {\n        setIsPostLoading(false);\n      });\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsSelectOpen(!isSelectOpen)}\n          onBlur={() => setIsSelectOpen(false)}\n        >\n          <span>{selectedUser ? `${selectedUser.name}` : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isSelectOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href=\"#user-1\"\n                className=\"dropdown-item\"\n                key={user.id}\n                onMouseDown={() => handleUserSelect(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useState, useContext } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { PostContext } from './PostContext';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const {\n    posts,\n    isPostLoading,\n    isPostLoadError,\n    selectedPost,\n  } = useContext(PostContext);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isPostLoading && <Loader />}\n\n                {isPostLoadError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isPostLoading\n                  && !isPostLoadError\n                  && posts.length === 0\n                  && selectedUser && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {selectedUser && !!posts.length && <PostsList />}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {!isPostLoadError && (\n              <div className=\"tile is-child box is-success\">\n                <PostDetails />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { CommentsProvider } from './CommentsContext';\nimport { PostProvider } from './PostContext';\n\nReactDOM.render(\n  <PostProvider>\n    <CommentsProvider>\n      <App />\n    </CommentsProvider>\n  </PostProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}